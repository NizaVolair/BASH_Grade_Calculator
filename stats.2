#!/bin/bash
#Niza Volair
#01-05-2016
#Shell Script to find averages, and medians


#This if/elif/else block checks arguments and responds accordingly 
#First- Ensure there are the correct number of arguments, or exit with error
if [[ $# == 1 || $# == 2 ]] 
    then
	#If there is one valid argument, get input from console and put into the temp file to work on
	if [[ $# == 1 && ( "$1" == -r* || "$1" == -c* ) ]]
	    then
		#NOTE: This method suggested by Sara Hashem on discussion board
		tempInput=./tempInput.$$
		cat "/dev/stdin" >> $tempInput
	    #If the there is a second valid argument that is a file, put it in a temp file to work on
	    elif [[ -f $2 ]]
	    then
		tempInput=./tempInput.$$
		cat $2 > $tempInput
	    else
		echo "ERROR: Incorrect arguments"
		echo "Please enter \"-row\" or \"-col\" and then an optional filename"
		exit 1
	fi
    else
	echo "ERROR: Incorrect number of arguments"
	echo "Please enter \"-row\" or \"-col\" and then an optional filename"
	exit 1
fi



if [[ "$1" == -c* ]]
then
    tempSwap=./tempSwap.$$
    WRD=$(head -n 1 $tempInput| wc -w);
    for(( i=1 ; i <= $WRD ; i++ )); do
    awk '{print $'$i'}' $tempInput| tr -s ' ' '\n' < $tempInput > $tempSwap ;
    done

    cat $tempSwap
    cat $tempSwap > $tempInput
    rm $tempSwap
fi

while read line
do 
   sum=0
   count=0
   average=0

   for i in $line
   do
     #make temp file for median with pid 
      temp=./temp.$$
      count=`expr $count + 1`
      sum=`expr $sum + $i`
      echo "$i" >> $temp
   done

  #if there are numbers on the line do calculations
   if [ $count -ne 0 ]
      then
	#Tests
	#echo "Count: $count"
        #echo "Sum: $sum"
	

	#***Find average rounding up on .5 ***
	#multiplying numerator (sum) by 10 to avoid decimals
	#divide by count and add 5 to account for rounding
	#divide by 10 again to get correct average
	#NOTE: method was suggested on class  discussion board by Chad Johnson
	#NOTE2: Not using <<'COMMENT' blocks here since they decreased readability

	 sum=`expr $sum \* 10`
	 average=`expr $sum / $count`
	 average=`expr $average + 5`
	 average=`expr $average / 10`

	#Display average
         echo "Average: $average"


	#***Find median from row values in temp file***
	#sort temp file into sorted temp file
	#if odd add 1, divide by 2
	#count is now the place of the median in the sorted list
	 
	 tempSorted=./tempSorted.$$
	 sort -n $temp >> $tempSorted

	 modCount=`expr $count % 2`	 
	 if [ $modCount -ne 0 ]
	 then
	    count=`expr $count + 1`
	    #echo "Odd Count Updated"
	 else
	    count=`expr $count + 2`
	 fi
	 
	 count=`expr $count / 2`

	#iterate through sorted list and find median at 1/2 count location
	 j=1
	 median=0
	 while read line
	 do
	    for i in $line
	    do
	    	if [ "$j" -eq "$count" ]
		then
		    #echo "$i" > $median
		    median=$i
		fi
	    j=`expr $j + 1`
	    done
	 done < $tempSorted

	 echo "Median: $median"   
	 echo "Sorted Line: "
	 cat $tempSorted
    fi

	#remove all temo files 
	 rm $temp
	 rm $tempSorted
	 
done < $tempInput

rm $tempInput

exit 0
