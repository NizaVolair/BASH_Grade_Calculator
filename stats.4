#!/bin/bash
#Niza Volair
#01-05-2016
#Shell Script to find averages, and medians


#trap will catch interrupts and delete temp files 
trap "rm â€“f temp*$$ ; exit 1" INT HUP TERM


#***VALIDATE ARGUMENTS***
#Ensure there are the correct number of arguments
#And ensure the first argument is -r (row calculations) or -c (column calculations)
if [[ ( $# < 1 || $# > 2 ) || ( "$1" != -r* && "$1" != -c* ) ]]
    then
	echo "./stats {-rows|-cols} [file]}" 1>&2
	exit 1
    #Ensure if second argument exists it is a readable file
    elif [[ ( $# == 2) && ( ! -r "$2" || ! -f "$2" ) ]]
	then 
	    echo "./stats: cannot read $2" 1>&2
	    exit 1
fi


#***INPUT -> TEMP FILE***
#If there is one valid argument, get input from console and put into the temp file to work on
if [[ $# == 1 ]]
    then
	#NOTE: This method suggested by Sara Hashem on discussion board
	tempInput=./tempInput.$$
	cat "/dev/stdin" >> $tempInput
    #There is a second valid argument that is a file, put it in a temp file to work on
    else
        tempInput=./tempInput.$$
	cat $2 > $tempInput
fi

#***COLUMN -> ROW***
#If the file needs to check columns, change columns to rows first
if [[ "$1" == -c* ]]
then
    tempSwap=./tempSwap.$$
    
    #get number of columns by counting number of words in a line
    numCol=`head -1 $tempInput | wc -w`
   
    #loop through columns, cut each column's data and enter into a temp swap file in a row
    for(( i = 1; i <= $numCol; i++ )){
	echo `cut -f $i $tempInput` >> $tempSwap
    }

    #switch the swap file with the tempInput file and then handle as rows
    cat $tempSwap > $tempInput
    #cat $tempInput
    rm $tempSwap
fi


#***CALCULATIONS***
#All data should now be in readable rows
#make temp files to save data to display
tempAverage=./tempAverage.$$
tempMedian=./tempMedian.$$

#loop through and calculate statists on each
while read line
do 
   sum=0
   count=0
   average=0

   for i in $line
   do
     #make temp file for median with pid 
      temp=./temp.$$
      count=`expr $count + 1`
      sum=`expr $sum + $i`
      echo "$i" >> $temp
   done

  #if there are numbers on the line do calculations
   if [ $count -ne 0 ]
      then
       #TEST CODE
	#echo "Count: $count"
        #echo "Sum: $sum"
	

	#***Find average rounding up on .5 ***
	#multiplying numerator (sum) by 10 to avoid decimals
	#divide by count and add 5 to account for rounding
	#divide by 10 again to get correct average
	#NOTE: method was suggested on class  discussion board by Chad Johnson
	#NOTE2: Not using <<'COMMENT' blocks here since they decreased readability

	 sum=`expr $sum \* 10`
	 average=`expr $sum / $count`
	 average=`expr $average + 5`
	 average=`expr $average / 10`
	 
	 echo "$average" >> $tempAverage

	#TEST CODE: echo "Average: $average"	

	#***Find median from row values in temp file***
	#sort temp file into sorted temp file
	#if odd add 1, divide by 2
	#count is now the place of the median in the sorted list
	 
	 tempSorted=./tempSorted.$$
	 sort -n $temp >> $tempSorted
	 rm $temp

	 modCount=`expr $count % 2`	 
	 if [ $modCount -ne 0 ]
	 then
	    count=`expr $count + 1`
	   #TEST CODE: echo "Odd Count Updated"
	 else
	    count=`expr $count + 2`
	 fi
	 
	 
	 count=`expr $count / 2`

	#iterate through sorted list and find median at 1/2 count location
	 j=1
	 median=0
	 while read line
	 do
	    for i in $line
	    do
	    	if [ "$j" -eq "$count" ]
		then
		   #WRONG? echo "$i" > $median
		    median=$i
		fi
	    j=`expr $j + 1`
	    done
	 done < $tempSorted
	 rm $tempSorted
	 
	 echo "$median" >> $tempMedian

	#TEST CODE
	 #echo "Median: $median"   
	 #echo "Sorted Line: "
	 #cat $tempSorted
    fi

	 
done < $tempInput


#***DISPLAY***
#Headers will display regardless, and calculations if file had input
#If -r then diplay calculations in rows
if [[ "$1" == -r* ]]
    then
    echo "Average"
	while read line
	do
	    for i in $line
	    do
		echo $i
	    done
	done < $tempAverage
    echo "Median"
    
    #If -c then diplay calculations in columns
    elif [[ "$1" == -c* ]]
	then
	    echo "Average     Median"
fi

#***FINSHED!***
#remove temp files and exit
rm $tempInput
rm $tempAverage
rm $tempMedian
exit 0
